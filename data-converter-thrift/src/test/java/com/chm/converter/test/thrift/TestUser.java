/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.chm.converter.test.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-02-14")
public class TestUser implements org.apache.thrift.TBase<TestUser, TestUser._Fields>, java.io.Serializable, Cloneable, Comparable<TestUser> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestUser");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LOCAL_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("localDateTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField YEAR_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("yearMonth", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TestUser.TestUserStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TestUser.TestUserTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable
    TestUser user; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String password; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String localDateTime; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String date; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String yearMonth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        USER((short)1, "user"),
        USER_NAME((short)2, "userName"),
        PASSWORD((short)3, "password"),
        LOCAL_DATE_TIME((short)4, "localDateTime"),
        DATE((short)5, "date"),
        YEAR_MONTH((short)6, "yearMonth");

        private static final java.util.Map<java.lang.String, TestUser._Fields> byName = new java.util.HashMap<java.lang.String, TestUser._Fields>();

        static {
            for (TestUser._Fields field : java.util.EnumSet.allOf(TestUser._Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static TestUser._Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // USER
                    return USER;
                case 2: // USER_NAME
                    return USER_NAME;
                case 3: // PASSWORD
                    return PASSWORD;
                case 4: // LOCAL_DATE_TIME
                    return LOCAL_DATE_TIME;
                case 5: // DATE
                    return DATE;
                case 6: // YEAR_MONTH
                    return YEAR_MONTH;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static TestUser._Fields findByThriftIdOrThrow(int fieldId) {
            TestUser._Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static TestUser._Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final java.util.Map<TestUser._Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<TestUser._Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<TestUser._Fields, org.apache.thrift.meta_data.FieldMetaData>(TestUser._Fields.class);
        tmpMap.put(TestUser._Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TestUser")));
        tmpMap.put(TestUser._Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(TestUser._Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(TestUser._Fields.LOCAL_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("localDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(TestUser._Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(TestUser._Fields.YEAR_MONTH, new org.apache.thrift.meta_data.FieldMetaData("yearMonth", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestUser.class, metaDataMap);
    }

    public TestUser() {
    }

    public TestUser(
            TestUser user,
            java.lang.String userName,
            java.lang.String password,
            java.lang.String localDateTime,
            java.lang.String date,
            java.lang.String yearMonth)
    {
        this();
        this.user = user;
        this.userName = userName;
        this.password = password;
        this.localDateTime = localDateTime;
        this.date = date;
        this.yearMonth = yearMonth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestUser(TestUser other) {
        if (other.isSetUser()) {
            this.user = new TestUser(other.user);
        }
        if (other.isSetUserName()) {
            this.userName = other.userName;
        }
        if (other.isSetPassword()) {
            this.password = other.password;
        }
        if (other.isSetLocalDateTime()) {
            this.localDateTime = other.localDateTime;
        }
        if (other.isSetDate()) {
            this.date = other.date;
        }
        if (other.isSetYearMonth()) {
            this.yearMonth = other.yearMonth;
        }
    }

    public TestUser deepCopy() {
        return new TestUser(this);
    }

    @Override
    public void clear() {
        this.user = null;
        this.userName = null;
        this.password = null;
        this.localDateTime = null;
        this.date = null;
        this.yearMonth = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TestUser getUser() {
        return this.user;
    }

    public TestUser setUser(@org.apache.thrift.annotation.Nullable TestUser user) {
        this.user = user;
        return this;
    }

    public void unsetUser() {
        this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
        return this.user != null;
    }

    public void setUserIsSet(boolean value) {
        if (!value) {
            this.user = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserName() {
        return this.userName;
    }

    public TestUser setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
        this.userName = userName;
        return this;
    }

    public void unsetUserName() {
        this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
        return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
        if (!value) {
            this.userName = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
        return this.password;
    }

    public TestUser setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
        this.password = password;
        return this;
    }

    public void unsetPassword() {
        this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
        return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
        if (!value) {
            this.password = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLocalDateTime() {
        return this.localDateTime;
    }

    public TestUser setLocalDateTime(@org.apache.thrift.annotation.Nullable java.lang.String localDateTime) {
        this.localDateTime = localDateTime;
        return this;
    }

    public void unsetLocalDateTime() {
        this.localDateTime = null;
    }

    /** Returns true if field localDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalDateTime() {
        return this.localDateTime != null;
    }

    public void setLocalDateTimeIsSet(boolean value) {
        if (!value) {
            this.localDateTime = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDate() {
        return this.date;
    }

    public TestUser setDate(@org.apache.thrift.annotation.Nullable java.lang.String date) {
        this.date = date;
        return this;
    }

    public void unsetDate() {
        this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
        return this.date != null;
    }

    public void setDateIsSet(boolean value) {
        if (!value) {
            this.date = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getYearMonth() {
        return this.yearMonth;
    }

    public TestUser setYearMonth(@org.apache.thrift.annotation.Nullable java.lang.String yearMonth) {
        this.yearMonth = yearMonth;
        return this;
    }

    public void unsetYearMonth() {
        this.yearMonth = null;
    }

    /** Returns true if field yearMonth is set (has been assigned a value) and false otherwise */
    public boolean isSetYearMonth() {
        return this.yearMonth != null;
    }

    public void setYearMonthIsSet(boolean value) {
        if (!value) {
            this.yearMonth = null;
        }
    }

    public void setFieldValue(TestUser._Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case USER:
                if (value == null) {
                    unsetUser();
                } else {
                    setUser((TestUser)value);
                }
                break;

            case USER_NAME:
                if (value == null) {
                    unsetUserName();
                } else {
                    setUserName((java.lang.String)value);
                }
                break;

            case PASSWORD:
                if (value == null) {
                    unsetPassword();
                } else {
                    setPassword((java.lang.String)value);
                }
                break;

            case LOCAL_DATE_TIME:
                if (value == null) {
                    unsetLocalDateTime();
                } else {
                    setLocalDateTime((java.lang.String)value);
                }
                break;

            case DATE:
                if (value == null) {
                    unsetDate();
                } else {
                    setDate((java.lang.String)value);
                }
                break;

            case YEAR_MONTH:
                if (value == null) {
                    unsetYearMonth();
                } else {
                    setYearMonth((java.lang.String)value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(TestUser._Fields field) {
        switch (field) {
            case USER:
                return getUser();

            case USER_NAME:
                return getUserName();

            case PASSWORD:
                return getPassword();

            case LOCAL_DATE_TIME:
                return getLocalDateTime();

            case DATE:
                return getDate();

            case YEAR_MONTH:
                return getYearMonth();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(TestUser._Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case USER:
                return isSetUser();
            case USER_NAME:
                return isSetUserName();
            case PASSWORD:
                return isSetPassword();
            case LOCAL_DATE_TIME:
                return isSetLocalDateTime();
            case DATE:
                return isSetDate();
            case YEAR_MONTH:
                return isSetYearMonth();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof TestUser)
            return this.equals((TestUser)that);
        return false;
    }

    public boolean equals(TestUser that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_user = true && this.isSetUser();
        boolean that_present_user = true && that.isSetUser();
        if (this_present_user || that_present_user) {
            if (!(this_present_user && that_present_user))
                return false;
            if (!this.user.equals(that.user))
                return false;
        }

        boolean this_present_userName = true && this.isSetUserName();
        boolean that_present_userName = true && that.isSetUserName();
        if (this_present_userName || that_present_userName) {
            if (!(this_present_userName && that_present_userName))
                return false;
            if (!this.userName.equals(that.userName))
                return false;
        }

        boolean this_present_password = true && this.isSetPassword();
        boolean that_present_password = true && that.isSetPassword();
        if (this_present_password || that_present_password) {
            if (!(this_present_password && that_present_password))
                return false;
            if (!this.password.equals(that.password))
                return false;
        }

        boolean this_present_localDateTime = true && this.isSetLocalDateTime();
        boolean that_present_localDateTime = true && that.isSetLocalDateTime();
        if (this_present_localDateTime || that_present_localDateTime) {
            if (!(this_present_localDateTime && that_present_localDateTime))
                return false;
            if (!this.localDateTime.equals(that.localDateTime))
                return false;
        }

        boolean this_present_date = true && this.isSetDate();
        boolean that_present_date = true && that.isSetDate();
        if (this_present_date || that_present_date) {
            if (!(this_present_date && that_present_date))
                return false;
            if (!this.date.equals(that.date))
                return false;
        }

        boolean this_present_yearMonth = true && this.isSetYearMonth();
        boolean that_present_yearMonth = true && that.isSetYearMonth();
        if (this_present_yearMonth || that_present_yearMonth) {
            if (!(this_present_yearMonth && that_present_yearMonth))
                return false;
            if (!this.yearMonth.equals(that.yearMonth))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
        if (isSetUser())
            hashCode = hashCode * 8191 + user.hashCode();

        hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
        if (isSetUserName())
            hashCode = hashCode * 8191 + userName.hashCode();

        hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
        if (isSetPassword())
            hashCode = hashCode * 8191 + password.hashCode();

        hashCode = hashCode * 8191 + ((isSetLocalDateTime()) ? 131071 : 524287);
        if (isSetLocalDateTime())
            hashCode = hashCode * 8191 + localDateTime.hashCode();

        hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
        if (isSetDate())
            hashCode = hashCode * 8191 + date.hashCode();

        hashCode = hashCode * 8191 + ((isSetYearMonth()) ? 131071 : 524287);
        if (isSetYearMonth())
            hashCode = hashCode * 8191 + yearMonth.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TestUser other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUser()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPassword()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetLocalDateTime()).compareTo(other.isSetLocalDateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLocalDateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localDateTime, other.localDateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDate()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetYearMonth()).compareTo(other.isSetYearMonth());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetYearMonth()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearMonth, other.yearMonth);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public TestUser._Fields fieldForId(int fieldId) {
        return TestUser._Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TestUser(");
        boolean first = true;

        sb.append("user:");
        if (this.user == null) {
            sb.append("null");
        } else {
            sb.append(this.user);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("userName:");
        if (this.userName == null) {
            sb.append("null");
        } else {
            sb.append(this.userName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("password:");
        if (this.password == null) {
            sb.append("null");
        } else {
            sb.append(this.password);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("localDateTime:");
        if (this.localDateTime == null) {
            sb.append("null");
        } else {
            sb.append(this.localDateTime);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("date:");
        if (this.date == null) {
            sb.append("null");
        } else {
            sb.append(this.date);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("yearMonth:");
        if (this.yearMonth == null) {
            sb.append("null");
        } else {
            sb.append(this.yearMonth);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TestUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TestUser.TestUserStandardScheme getScheme() {
            return new TestUser.TestUserStandardScheme();
        }
    }

    private static class TestUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<TestUser> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TestUser struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.user = new TestUser();
                            struct.user.read(iprot);
                            struct.setUserIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // USER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.userName = iprot.readString();
                            struct.setUserNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PASSWORD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.password = iprot.readString();
                            struct.setPasswordIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // LOCAL_DATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.localDateTime = iprot.readString();
                            struct.setLocalDateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DATE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.date = iprot.readString();
                            struct.setDateIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // YEAR_MONTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.yearMonth = iprot.readString();
                            struct.setYearMonthIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TestUser struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.user != null) {
                oprot.writeFieldBegin(USER_FIELD_DESC);
                struct.user.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.userName != null) {
                oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                oprot.writeString(struct.userName);
                oprot.writeFieldEnd();
            }
            if (struct.password != null) {
                oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                oprot.writeString(struct.password);
                oprot.writeFieldEnd();
            }
            if (struct.localDateTime != null) {
                oprot.writeFieldBegin(LOCAL_DATE_TIME_FIELD_DESC);
                oprot.writeString(struct.localDateTime);
                oprot.writeFieldEnd();
            }
            if (struct.date != null) {
                oprot.writeFieldBegin(DATE_FIELD_DESC);
                oprot.writeString(struct.date);
                oprot.writeFieldEnd();
            }
            if (struct.yearMonth != null) {
                oprot.writeFieldBegin(YEAR_MONTH_FIELD_DESC);
                oprot.writeString(struct.yearMonth);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TestUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TestUser.TestUserTupleScheme getScheme() {
            return new TestUser.TestUserTupleScheme();
        }
    }

    private static class TestUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<TestUser> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TestUser struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetUser()) {
                optionals.set(0);
            }
            if (struct.isSetUserName()) {
                optionals.set(1);
            }
            if (struct.isSetPassword()) {
                optionals.set(2);
            }
            if (struct.isSetLocalDateTime()) {
                optionals.set(3);
            }
            if (struct.isSetDate()) {
                optionals.set(4);
            }
            if (struct.isSetYearMonth()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetUser()) {
                struct.user.write(oprot);
            }
            if (struct.isSetUserName()) {
                oprot.writeString(struct.userName);
            }
            if (struct.isSetPassword()) {
                oprot.writeString(struct.password);
            }
            if (struct.isSetLocalDateTime()) {
                oprot.writeString(struct.localDateTime);
            }
            if (struct.isSetDate()) {
                oprot.writeString(struct.date);
            }
            if (struct.isSetYearMonth()) {
                oprot.writeString(struct.yearMonth);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TestUser struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                struct.user = new TestUser();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
            }
            if (incoming.get(1)) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
            }
            if (incoming.get(3)) {
                struct.localDateTime = iprot.readString();
                struct.setLocalDateTimeIsSet(true);
            }
            if (incoming.get(4)) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
            }
            if (incoming.get(5)) {
                struct.yearMonth = iprot.readString();
                struct.setYearMonthIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

