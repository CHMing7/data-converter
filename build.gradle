apply from: 'dependency.gradle'
apply plugin: 'java-platform'

buildscript {
    repositories {
        maven { url = "https://maven.aliyun.com/nexus/content/repositories/jcenter" }
        maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.18.0'
    }
}

subprojects {
    apply plugin: 'java-library'

    dependencies {
        annotationProcessor(libs.auto_service)
    }

    javadoc {
        options.encoding = "UTF-8"
        failOnError = false
    }

    test {
        useJUnitPlatform()
        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }

    tasks.withType(Copy) {
        filesMatching("**/*.proto") {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.vanniktech.maven.publish'

    group = GROUP
    version = VERSION_NAME

    repositories {
        maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
        mavenLocal()
    }


    plugins.withId("com.vanniktech.maven.publish") {
        group = project.group
        version = project.version

        mavenPublish {
            sonatypeHost = "S01"
        }

        mavenPublishing {

            signAllPublications()

            pom {
                name = project.name
            }

            pomFromGradleProperties()
        }
    }

    if (project == rootProject) {
        javaPlatform {
            allowDependencies()
        }

        dependencies {
            // 引用除了all模块与根模块之外的所有模块
            rootProject.allprojects.stream().filter({
                it != rootProject && it.name != "data-converter-all"
            }).forEach({
                api(it)
            })

            constraints {
                // 引用除了all模块与根模块之外的所有模块
                rootProject.allprojects.stream().filter({
                    it != rootProject && it.name != "data-converter-all"
                }).forEach({
                    api(it)
                })
            }
        }
    }

    publishing {
        if (project == rootProject) {
            // 定义发布项目
            publications {
                maven(MavenPublication) {
                    from(components["javaPlatform"])
                    // bom模块 artifactId
                    artifactId = "data-converter-bom"
                    // bom模块说明
                    POM_DESCRIPTION = "data converter bom"
                    // 项目名
                    pom.name = "data-converter-bom"
                }
            }
        }


        repositories {
            // 本地maven仓库
            maven { url uri(LOCAL_MAVEN_REPO) }
        }
    }
}

publish {
    // 引用除了all模块与根模块之外的所有模块
    rootProject.allprojects.stream().filter({
        it != rootProject && it.name != "data-converter-all"
    }).forEach({
        mustRunAfter(String.format(":%s:publish", it.name))
    })
}